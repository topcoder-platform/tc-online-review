<?xml version="1.0"?>

<project name="Online Review" default="build" basedir=".">
  <!-- property file defining the component's dependencies -->
  <property file="build.properties"/>

  <!-- Import the dependencies of this build file -->
  <import file="${basedir}/build-dependencies.xml"/>

  <!-- include ant contrib tasks -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant-contrib.jar}"/>
  
  <!--Import the build-components.xml -->
  <property name="components.conf" value="${basedir}/components.xml" />
  <property name="components_dir" value="components" />
  <import file="${basedir}/build-components.xml"/>


  <!-- COMPONENT PARAMETERS -->
  <property name="component" value="online_review"/>
  <property name="package" value="com.cronos.onlinereview"/>
  <property name="packagedir" value="com/cronos/onlinereview"/>
  <property name="distfilename" value="review"/>
  <property name="component_version" value="1.0"/>
  <property name="component_path" value="${distfilename}/${component_version}"/>

  <!-- DIRECTORY SETUP -->
  <property name="srcdir" value="src"/>

  <property name="docsdir" value="docs"/>
  <property name="configdir" value="conf"/>
  <property name="testlogdir" value="log"/>
  <property name="testfiles" value="test_files"/>
  <property name="javadocsdir" value="${docsdir}/javadocs"/>
  <property name="webdir" value="web"/>
  <property name="reports" value="reports"/>
  <property name="jboss_files" value="jboss_files"/>
  <property name="jboss_files_conf" value="${jboss_files}/conf"/>
  <property name="jboss_files_deploy" value="${jboss_files}/deploy"/>
  <property name="jboss_files_lib" value="${jboss_files}/lib"/>

  <property name="javasrc" value="${srcdir}/java"/>
  <property name="javamain" value="${javasrc}/main"/>
  <property name="javatests" value="${javasrc}/tests"/>
  <property name="sqlsrc" value="${srcdir}/sql"/>

  <property name="builddir" value="build/ant/online_review" />
  <property name="build_conf" value="${builddir}/conf" />
  <property name="build_tests" value="${builddir}/tests" />
  <property name="build_shared" value="${builddir}/shared" />
  <property name="build_jboss_files" value="${builddir}/jboss_files" />
  <property name="build_jboss_files_conf" value="${build_jboss_files}/conf" />
  <property name="build_jboss_files_deploy" value="${build_jboss_files}/deploy" />
  <property name="build_classdir" value="${builddir}/classes" />
  <property name="build_testclassdir" value="${build_tests}/testClasses" />
  <property name="build_testconfdir" value="${build_tests}/conf" />
  <property name="build_distdir" value="${builddir}/dist" />
  <property name="build_explodedwar" value="${build_distdir}/exploded/${distfilename}.war" />
  <property name="build_docsdir" value="${builddir}/${docsdir}" />
  <property name="build_javadocsdir" value="${builddir}/${javadocsdir}" />
  <property name="build_webdir" value="${builddir}/${webdir}" />
  <property name="build_lib" value="${builddir}/lib" />
  <property name="build_tcsdistdir" value="${build_distdir}/${distfilename}-${component_version}" />

  <property name="deploy-dir" value="${JBOSS_HOME}/server/default/deploy/${distfilename}.war"/>
  <property name="deploy-conf-dir" value="${JBOSS_HOME}/server/default/conf"/>
  <property name="deploy-deploy-dir" value="${JBOSS_HOME}/server/default/deploy"/>
  <property name="deploy-lib-dir" value="${JBOSS_HOME}/server/default/lib"/>

  <property name="remotedeploy-dir" value="${scp_remotejboss}/server/default/deploy/"/>
  <property name="remotedeploy-conf-dir" value="${scp_remotejboss}/server/default/conf"/>
  <property name="remotedeploy-lib-dir" value="${scp_remotejboss}/server/default/lib"/>

  <!-- EXECUTION TAGS -->
  <property name="debug" value="off"/>
  <property name="verbose" value="no"/>

  <!-- COMPONENT DISTRIBUTION STRUCTURE -->
  <property name="component.war" value="${build_distdir}/${distfilename}.war" />
  <property name="dist_javadocs" value="${build_tcsdistdir}/${javadocsdir}" />

  <!-- Clean output folder -->
  <target name="clean">
    <delete failonerror="false" dir="${builddir}"/>
  </target>
  
  <!-- compiles the application -->
  <target name="compile">
    <trycatch property="error">
        <try>
            <get-components-src />
            <mkdir dir="${build_classdir}"/>
            <javac
                   srcdir="${javamain};${components_src}"
                   destdir="${build_classdir}"
                   includes="**/*.java"
                   debug="true"
                   verbose="${verbose}"
                   source="1.5"
                   target="1.5">
              <classpath refid="buildlibs"/>
            </javac>
        </try>
        <catch>
            <echo>----------------------------------------------------------------------------------------------------------</echo>
            <echo>IMPORTANT - Make sure that all component's sources are up to date by executing 'ant checkout-components' !</echo>
            <echo>----------------------------------------------------------------------------------------------------------</echo>
            <fail>${error}</fail>
        </catch>
    </trycatch>
  </target>

  <!-- updates Online Review files from SVN and builds application -->
  <target name="build" depends="compile"/>

  <!-- replaces variables in configuration files with values for the target environment -->
  <target name="tokenize">
    <mkdir dir="${build_conf}"/>
    <copy todir="${build_conf}" overwrite="true">
      <fileset dir="${configdir}">
        <exclude if="exclude.mockxmlauthenticator.xmlfile" name="mockxmlauthenticator.xml"/>
        <include name="**"/>
      </fileset>
    </copy>

    <replace dir="${build_conf}" replacefilterfile="${token.properties}">
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*.xsl"/>
      <include name="**/*.xsd"/>
    </replace>
  </target>

  <!-- creates the application war file -->
  <target name="war" depends="compile, tokenize">
    <mkdir dir="${build_distdir}"/>

    <war destfile="${component.war}" webxml="${build_conf}/WEB-INF/web.xml" duplicate="fail">
      <webinf dir="${build_conf}/WEB-INF" includes="*.tld, *.xml, server-config.wsdd" excludes="web.xml"/>
      <metainf dir="${build_conf}/META-INF" includes="*.xml"/>
      <classes dir="${build_classdir}" includes="**"/>
      <classes dir="${build_conf}" includes="**" excludes="WEB-INF/**, META-INF/**"/>
      <classes dir="${build_conf}/WEB-INF/classes"/>
      <lib dir="${tcs_libdir}/${contest_eligibility_persistence.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${contest_eligibility_validation.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${JNDI_Utility.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${object_factory.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${object_factory_configuration_api_plugin.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${distribution_tool.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${simple_cache.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${projectEJB.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${userEJB.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${securityEJB.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}/${termsOfUseEJB.path}" includes="*.jar"/>
      <lib dir="${tcs_libdir}" includes="tc_id_generator.jar"/>
      <lib dir="${tcs_libdir}" includes="tcjive.jar"/>
      <lib dir="${ext_libdir}" includes="*.jar" excludes="ejb-2_0.jar, servlet-api.jar, jsp-api.jar, log4j.jar"/>
      <lib dir="${ext_libdir}/spring" includes="*.jar"/>
      <lib dir="${ext_libdir}/hibernate" includes="*.jar"/>
      <lib dir="${ext_libdir}/svnkit" includes="*.jar"/>
      <lib file="${jaf.jar}" />
      <lib dir="${shared_libdir}" includes="${catalog.jar.name}"/>
      <lib dir="${shared_libdir}" includes="${tcwebcommon.jar.name}"/>
      <lib dir="${shared_libdir}" includes="${shared.jar.name}"/>

      <!-- Added libs to support ejb3 calls -->
      <lib dir="${ext_libdir}/jboss/">
        <include name="jboss-ejb3-client.jar"/>
        <include name="jboss-ejb3x.jar"/>
        <include name="jboss-aop-jdk50-client.jar"/>
        <include name="jboss-aspect-jdk50-client.jar"/>
        <include name="jboss-remoting.jar"/>
      </lib>

      <fileset dir="${webdir}" includes="**" excludes="i/**, js/**, css/**"/>
    </war>
  </target>

  <!-- Explode the war file for future staging -->
  <target name="explode_war" depends="war">
    <mkdir dir="${build_explodedwar}"/>

    <unwar src="${component.war}" dest="${build_explodedwar}"/>
  </target>

  <!-- Prepares the distribution for deployment -->
  <target name="dist" depends="explode_war"/>

  <!-- replaces variables in configuration files with values for the target environment -->
  <target name="tokenize_shared_files">
    <mkdir dir="${build_shared}"/>

    <copy todir="${build_shared}" overwrite="true">
      <fileset dir="${shared_libdir}">
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
        <include name="**/*.xsl"/>
        <include name="**/*.xsd"/>
      </fileset>
    </copy>

    <replace dir="${build_shared}" replacefilterfile="${token.properties}">
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*.xsl"/>
      <include name="**/*.xsd"/>
    </replace>
  </target>

  <!-- copy jboss dependency files to jboss lib folder -->
  <target name="copy_shared_files" depends="tokenize_shared_files">
    <copy todir="${deploy-conf-dir}" overwrite="true">
      <fileset dir="${build_shared}"/>
    </copy>
    <copy todir="${deploy-lib-dir}" overwrite="true" verbose="${verbose}" flatten="true">
      <fileset dir="${shared_libdir}">
        <include name="${shared.jar.name}"/>
        <include name="${tcwebcommon.jar.name}"/>
      </fileset>
    </copy>
  </target>

  <target name="copy_shared_files_remote_unix" if="is_unix" depends="tokenize_shared_files">
    <scp_unix id="aa" file="${build_shared}" remotefile="${remotedeploy-conf-dir}" isdir="true"/>
    <scp_unix id="ab" file="${shared_libdir}/${forums.jar.name}" remotefile="${remotedeploy-lib-dir}"
              isdir="false"/>
    <scp_unix id="ac" file="${shared_libdir}/${shared.jar.name}" remotefile="${remotedeploy-lib-dir}"
              isdir="false"/>
    <scp_unix id="ad" file="${shared_libdir}/${tcwebcommon.jar.name}" remotefile="${remotedeploy-lib-dir}"
              isdir="false"/>
  </target>

  <target name="copy_shared_files_remote_windows" if="is_windows" depends="tokenize_shared_files">
    <scp_windows id="aa" file="${build_shared}" remotefile="${remotedeploy-conf-dir}" isdir="true"/>
    <scp_windows id="ab" file="${shared_libdir}/${forums.jar.name}" remotefile="${remotedeploy-lib-dir}"
                 isdir="false"/>
    <scp_windows id="ac" file="${shared_libdir}/${shared.jar.name}" remotefile="${remotedeploy-lib-dir}"
                 isdir="false"/>
    <scp_windows id="ad" file="${shared_libdir}/${tcwebcommon.jar.name}" remotefile="${remotedeploy-lib-dir}"
                 isdir="false"/>
  </target>

  <target name="copy_shared_files_remote" depends="copy_shared_files_remote_unix, copy_shared_files_remote_windows"/>

  <!-- replaces variables in configuration files with values for the target environment -->
  <target name="tokenize_jboss_files">
    <mkdir dir="${build_jboss_files_conf}"/>
    <mkdir dir="${build_jboss_files_deploy}"/>

    <copy todir="${build_jboss_files_conf}" overwrite="true">
      <fileset dir="${jboss_files_conf}">
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
        <include name="**/*.xsl"/>
        <include name="**/*.xsd"/>
      </fileset>
    </copy>

    <replace dir="${build_jboss_files_conf}" replacefilterfile="${token.properties}">
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*.xsl"/>
      <include name="**/*.xsd"/>
    </replace>

    <copy todir="${build_jboss_files_deploy}" overwrite="true">
      <fileset file="${jboss_files_deploy}/tcs_informix-ds.xml"/>
    </copy>

    <replace dir="${build_jboss_files_deploy}" replacefilterfile="${token.properties}">
      <include name="tcs_informix-ds.xml"/>
    </replace>
  </target>

  <!-- copy jboss dependency files to jboss lib folder -->
  <!-- Use this task carefully !!! -->
  <target name="copy_jboss_files" depends="tokenize_jboss_files">
    <copy todir="${deploy-conf-dir}" overwrite="true">
      <fileset dir="${build_jboss_files_conf}"/>
    </copy>
    <copy todir="${deploy-deploy-dir}" overwrite="true">
      <fileset dir="${build_jboss_files_deploy}"/>
    </copy>
    <copy todir="${deploy-deploy-dir}" overwrite="true">
      <fileset dir="${jboss_files_deploy}" excludes="tcs_informix-ds.xml" includes="**"/>
    </copy>
    <mkdir dir="${deploy-deploy-dir}/static.ear/static.war"/>
    <copy todir="${deploy-deploy-dir}/static.ear/static.war" overwrite="true">
      <fileset dir="${webdir}">
        <include name="css/**/*"/>
        <include name="i/**/*"/>
        <include name="js/**/*"/>
      </fileset>
    </copy>
    <copy todir="${deploy-lib-dir}" overwrite="true" verbose="${verbose}" flatten="true">
      <fileset dir="${jboss_files_lib}"/>
    </copy>
  </target>

  <!-- move the built files to the target deployment location -->
  <target name="deploy_locally" depends="clean, dist, copy_shared_files">
    <mkdir dir="${deploy-dir}"/>

    <copy todir="${deploy-dir}" overwrite="true">
      <fileset dir="${build_explodedwar}" includes="**"/>
    </copy>
  </target>

  <target name="deploy_remote_unix" if="is_unix" depends="dist, copy_shared_files_remote">
    <scp_unix id="ba" file="${build_explodedwar}" remotefile="${remotedeploy-dir}" isdir="true"/>
  </target>

  <target name="deploy_remote_windows" if="is_windows" depends="dist, copy_shared_files_remote">
    <scp_windows id="ba" file="${build_explodedwar}" remotefile="${remotedeploy-dir}" isdir="true"/>
  </target>

  <!-- remove the exploded dir from jboss -->
  <target name="undeploy">
    <delete failonerror="false" dir="${deploy-dir}"/>
  </target>

  <!-- builds,tokenizes and deploys the application -->
  <target name="deploy" depends="clean, build, deploy_locally"/>
  <target name="deploy_remote" depends="clean, build, deploy_remote_unix, deploy_remote_windows"/>

  <!-- builds deploys OR with dependencies -->
  <target name="first_deploy" depends="deploy, copy_jboss_files">
  </target>

  <!-- stops Jboss, reinstalls database, redeploys OR and starts jboss. -->
  <target name="redeploy">
    <antcall target="stop_tools" />

    <antcall target="checkout-components" />
    <antcall target="deploy_tools" />

    <antcall target="start_jboss" />
    <sleep seconds="${sleep_before_stopping}" />
    <antcall target="test" />
    <antcall target="stop_jboss" />
  </target>

  <target name="restart">
    <antcall target="stop_tools" />
    <antcall target="deploy_tools" />
    <antcall target="start_tools" />
  </target>

  <!-- Starts all tools -->
  <target name="start_tools">
    <antcall target="start_jboss"/>

    <if>
      <available file="${auto_pilot_deploy_dir}/build.xml" />
      <then>
        <ant antfile="${auto_pilot_deploy_dir}/build.xml" dir="${auto_pilot_deploy_dir}"
             target="start_ap" inheritall="false" inheritrefs="true"/>
      </then>
    </if>

    <if>
      <available file="${ldt_deploy_dir}/build.xml" />
      <then>
        <ant antfile="${ldt_deploy_dir}/build.xml" dir="${ldt_deploy_dir}"
         target="start_ldt" inheritall="false" inheritrefs="true"/>
      </then>
    </if>
  </target>

  <!-- Stops all tools -->
  <target name="stop_tools">
    <antcall target="stop_jboss" />

    <if>
      <available file="${auto_pilot_deploy_dir}/build.xml" />
      <then>
        <ant antfile="${auto_pilot_deploy_dir}/build.xml" dir="${auto_pilot_deploy_dir}"
         target="stop_ap" inheritall="false" inheritrefs="true"/>
      </then>
    </if>

    <if>
      <available file="${ldt_deploy_dir}/build.xml" />
      <then>
        <ant antfile="${ldt_deploy_dir}/build.xml" dir="${ldt_deploy_dir}"
         target="stop_ldt" inheritall="false" inheritrefs="true"/>
      </then>
    </if>

  </target>
  
  <!-- Redeploy tools -->
  <target name="deploy_tools" >
    <!-- redeploy tools -->
    <antcall target="first_deploy" />
    <ant antfile="${online_review_home}/scripts/auto_pilot/build.xml" dir="${online_review_home}/scripts/auto_pilot"
         target="all" inheritall="false" inheritrefs="true"/>
    <ant antfile="${online_review_home}/scripts/late_deliverables_tracker/build.xml" dir="${online_review_home}/scripts/late_deliverables_tracker"
         target="all" inheritall="false" inheritrefs="true"/>
  </target>

  <!-- JBoss start / stop -->
  <macrodef name="start_jboss">
    <attribute name="background" default="false"/>
    <sequential>
      <available file="${jdk_home}/lib/tools.jar" property="java.tools.jar.exists"/>
      <fail unless="java.tools.jar.exists" message="Unable to find ${jdk_home}/lib/tools.jar"/>
      <available file="${JBOSS_HOME}/bin/run.jar" property="jboss.run.jar.exists"/>
      <fail unless="jboss.run.jar.exists" message="Unable to find ${JBOSS_HOME}/bin/run.jar"/>
      <echo>Starting JBoss in ${JBOSS_HOME}...</echo>
      <java jvm="${jdk_home}/bin/java"
            dir="${JBOSS_HOME}/bin"
            classname="org.jboss.Main" fork="true" spawn="@{background}">
        <jvmarg value="-Xms${jboss_heap_size}"/>
        <jvmarg value="-Xmx${jboss_heap_size}"/>
        <jvmarg value="-Djava.endorsed.dirs=${JBOSS_HOME}/lib/endorsed"/>
        <classpath>
          <pathelement path="${JBOSS_HOME}/bin/run.jar"/>
          <pathelement path="${jdk_home}/lib/tools.jar"/>
        </classpath>
      </java>
    </sequential>
  </macrodef>

  <target name="start_jboss">
    <start_jboss background="true"/>
  </target>

  <target name="stop_jboss">
    <sequential>
      <available file="${JBOSS_HOME}/bin/shutdown.jar" property="jboss.shutdown.jar.exists"/>
      <fail unless="jboss.shutdown.jar.exists" message="Unable to find ${JBOSS_HOME}/bin/sutdown.jar"/>
      <available file="${JBOSS_HOME}/client/jbossall-client.jar" property="jboss.client.jar.exists"/>
      <fail unless="jboss.client.jar.exists"
            message="Unable to find ${JBOSS_HOME}/client/jbossall-client.jar"/>
      <sleep seconds="${sleep_before_stopping}"/>
      <if>
        <socket server="${bind_addr}" port="${jnp_port}"/>
        <then>
          <java jvm="${jdk_home}/bin/java"
                classname="org.jboss.Shutdown" fork="true" resultproperty="shutdown.rc" failonerror="false">
            <arg line="-s jnp://${bind_addr}:${jnp_port}"/>
            <classpath>
              <pathelement path="${JBOSS_HOME}/bin/shutdown.jar"/>
              <pathelement path="${JBOSS_HOME}/client/jbossall-client.jar"/>
            </classpath>
          </java>
          <echo>Shutdown rc = ${shutdown.rc}</echo>
          <condition property="shutdown.okay">
            <equals arg1="${shutdown.rc}" arg2="0"/>
          </condition>
          <fail unless="shutdown.okay"
                message="Unable to shut down JBoss (maybe it hasn't fully started yet?)."/>
          <echo>Waiting for ${bind_addr}:${jnp_port} to stop listening...</echo>
          <waitfor maxwait="2" maxwaitunit="minute">
            <not>
              <socket server="${bind_addr}" port="${jnp_port}"/>
            </not>
          </waitfor>
          <sleep seconds="${sleep_before_stopping}" />
        </then>
      </if>
    </sequential>
  </target>

  <target name="javadoc" depends="compile">
    <mkdir dir="${dist_javadocs}"/>
    <javadoc packagenames="${package}.*" sourcepath="${javamain}" classpath="${build_classdir}"
             classpathref="buildlibs" destdir="${dist_javadocs}" windowtitle="Topcoder Software"
             header="&lt;table border=0 cellpadding=0 cellspacing=2&gt;&lt;tr&gt;&lt;td&gt;&lt;font class=tcoder2&gt;&#091; &lt;/font&gt;&lt;font class=tcoder1&gt;TOP&lt;/font&gt;&lt;font class=tcoder2&gt;CODER &lt;/font&gt;&lt;font class=tcoder2&gt;&#093;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font class=tcoder4&gt;&#153;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=tcoder3 align=center&gt;&lt;font class=tcoder3&gt;SOFTWARE&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"
             footer="&lt;table border=0 cellpadding=0 cellspacing=2&gt;&lt;tr&gt;&lt;td&gt;&lt;font class=tcoder2&gt;&#091; &lt;/font&gt;&lt;font class=tcoder1&gt;TOP&lt;/font&gt;&lt;font class=tcoder2&gt;CODER &lt;/font&gt;&lt;font class=tcoder2&gt;&#093;&lt;/font&gt;&lt;/td&gt;&lt;td&gt;&lt;font class=tcoder4&gt;&#153;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=tcoder3 align=center&gt;&lt;font class=tcoder3&gt;SOFTWARE&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"
             bottom="&lt;font class=tcoder5&gt;Contact TopCoder Software at &lt;a href='http://www.topcodersoftware.com'&gt;www.topcodersoftware.com&lt;/a&gt;&lt;/font&gt;"
             stylesheetfile="${javadocsdir}/stylesheet.css" verbose="${verbose}">
      <tag name="copyright" description="Copyright:" scope="types"/>
    </javadoc>
  </target>

  <target name="reports" depends="test">
    <mkdir dir="${reports}" />

    <junitreport todir="${reports}">
      <fileset dir="${testlogdir}">
        <include name="*.xml" />
      </fileset>
      <report format="frames" todir="${reports}" />
    </junitreport>
    <echo>The execution of reports is complete.  Reports are available in /${reports}</echo>
  </target>
  
  <!-- - - - - - - - - - - - - - - - - -
      target: prod-init
    - - - - - - - - - - - - - - - - - -->
  <target name="prod-init">
    <property name="component.war" value="${distfilename}.war" />
  </target>

  <target name="deploy-common">
    <mkdir dir="${deploy-dir}" />
    <unwar src="${component.war}" dest="${deploy-dir}" />
    <move todir="${deploy-dir}/../../lib" overwrite="true" verbose="true">
      <fileset dir="${deploy-dir}/WEB-INF/lib">
        <include name="${tcwebcommon.jar.name}"/>
        <include name="${catalog.jar.name}"/>
        <include name="${shared.jar.name}"/>
        <include name="${forums.jar.name}"/>
      </fileset>
    </move>
    <delete verbose="true">
      <fileset dir="${deploy-dir}/WEB-INF/lib">
        <include name="log4j.jar"/>
      </fileset>
    </delete>
  </target>

  <target name="deploy-prod" depends="prod-init, deploy-common"/>

  <target name="main" depends="deploy, test"/>

  <!-- integration tests targets -->
  <target name="tokenize_tests">
    <mkdir dir="${build_testconfdir}" />
    <copy todir="${build_testconfdir}" overwrite="true">
      <fileset dir="${testfiles}">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </copy>

    <replace dir="${build_testconfdir}" replacefilterfile="${token.properties}">
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*.xsl"/>
      <include name="**/*.xsd"/>
    </replace>
  </target>

  <target name="compile_tests">
    <trycatch property="error">
        <try>
            <get-components-src />
            <mkdir dir="${build_testclassdir}"/>
            <javac
                   srcdir="${javatests};${components_src}"
                   destdir="${build_testclassdir}"
                   includes="**/*.java"
                   debug="true"
                   verbose="${verbose}"
                   source="1.5"
                   target="1.5">
              <classpath refid="test.build.classpath"/>
            </javac>
        </try>
        <catch>
            <echo>----------------------------------------------------------------------------------------------------------</echo>
            <echo>IMPORTANT - Make sure that all component's sources are up to date by executing 'ant checkout-components' !</echo>
            <echo>----------------------------------------------------------------------------------------------------------</echo>
            <fail>${error}</fail>
        </catch>
    </trycatch>
  </target>

  <path id="test.build.classpath">
    <path refid="buildlibs"/>
    <pathelement location="${ifx-jdbc.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${selenium_client.jar}"/>
    <path path="${build_testconfdir}"/>
  </path>


  <target name="test" depends="tokenize_tests, compile_tests">
    <antcall target="tests.setup" />
    <antcall target="tests.execute" />
    <antcall target="tests.teardown" />
  </target>

  <target name="tests.execute" >
    <sequential>
      <mkdir dir="${testlogdir}"/>
      <junit fork="true" haltonerror="false">
        <classpath location="${build_testclassdir}"/>
        <classpath refid="test.build.classpath"/>
        <test name="${package}.FunctionalTests" todir="${testlogdir}">
          <formatter type="plain" usefile="true"/>
          <formatter type="xml" usefile="true"/>
        </test>
      </junit>
    </sequential>
  </target>

  <!-- Starts Selenium server -->
  <target name="tests.setup" >
    <sequential>
          <java jar="${selenium_server.jar}" fork="true" spawn="true">
            <arg line="-port ${selenium_port}"/>
          </java>
          <waitfor maxwait="30" maxwaitunit="second">
            <and>
              <socket server="${bind_addr}" port="${selenium_port}"/>
              <http url="http://${bind_addr}:${selenium_port}/selenium-server/index.html" errorsBeginAt="404" />
            </and>
          </waitfor>
    </sequential>
  </target>

  <target name="tests.teardown" >
    <get taskname="selenium-shutdown"
         src="http://${bind_addr}:${selenium_port}/selenium-server/driver/?cmd=shutDownSeleniumServer"
         dest="${testlogdir}/result.txt" ignoreerrors="true" />
  </target>
</project>